<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chenlimao.github.io</id>
    <title>Chenlimao</title>
    <updated>2023-07-13T05:56:50.101Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chenlimao.github.io"/>
    <link rel="self" href="https://chenlimao.github.io/atom.xml"/>
    <subtitle>似虎能缘木,如驹不伏辕。</subtitle>
    <logo>https://chenlimao.github.io/images/avatar.png</logo>
    <icon>https://chenlimao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2023, Chenlimao</rights>
    <entry>
        <title type="html"><![CDATA[vscode如何设置Vue别名路径智能提示]]></title>
        <id>https://chenlimao.github.io/post/fdDctZIRwBiV2CqahlzM/</id>
        <link href="https://chenlimao.github.io/post/fdDctZIRwBiV2CqahlzM/">
        </link>
        <updated>2023-07-13T03:42:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>当使用 Vue 框架进行项目开发时，在 vue.config.js 中配置好了路径别名后，到其他页面引入组件、引入 css 、引入静态文件路径时，使用路径别名不会智能提示路径。虽然在 vscode 中安装了 Path Intellisense 插件，但是并无作用。这样容易出现路径拼写错误的低能问题，同时也会造成开发效率降低！</p>
<h2 id="解决方法1不推荐">解决方法1（不推荐）</h2>
<p>在项目 package.json 所在同级目录下创建文件 jsconfig.json， 来解决别名路径不提示的问题。（配置完保存文件后需要重启编辑器才能生效。而且它只能识别 .vue 和 .js结尾的文件，css文件与其他的静态文件依然没有提示， 不推荐！！！）</p>
<pre><code>{  
    &quot;compilerOptions&quot;: {  
        &quot;baseUrl&quot;: &quot;.&quot;,  
        &quot;paths&quot;: {  
            &quot;@/\*&quot;: \['src/\*'\],  
            &quot;a/\*&quot;: \[&quot;src/assets/\*&quot;\],  
            &quot;c/\*&quot;: \[&quot;src/components/\*&quot;\],  
            ...  
        }  
     },  
    &quot;include&quot;: \[&quot;./src/\*\*/\*.vue&quot;, &quot;./src/\*\*/\*.js&quot;\], 
    &quot;exclude&quot;: \[&quot;node\_modules&quot;\]  
}
</code></pre>
<h2 id="解决方法2">解决方法2</h2>
<p>在 vscode 的 setting.json 中给 Path Intellisence 配置（该方案是最优选，能识别任意格式文件，覆盖率最广。当别名发生改变时只需修改配置即可）</p>
<pre><code>&quot;path-intellisense.mappings&quot;: {  
    &quot;a&quot;: &quot;${workspaceRoot}/src&quot;,  
    &quot;c&quot;: &quot;${workspaceRoot}/src/components&quot;,  
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Electron-builder+Vue+Element-UI打包项目后字体图标丢失]]></title>
        <id>https://chenlimao.github.io/post/QPBsnmOVLh9XfrTW2Agq/</id>
        <link href="https://chenlimao.github.io/post/QPBsnmOVLh9XfrTW2Agq/">
        </link>
        <updated>2023-06-14T02:49:05.000Z</updated>
        <content type="html"><![CDATA[<p>1、丢失效果<br>
<img src="https://chenlimao.github.io/post-images/1689227791819.png" alt="" loading="lazy"><br>
2、复原效果<br>
<img src="https://chenlimao.github.io/post-images/1689227799541.png" alt="" loading="lazy"></p>
<h2 id="1-背景">1、背景</h2>
<p>使用vue-cli5创建vue2项目，使用了element-ui，在使用electron-builder打包build之后，发现element-ui的样式丢失，找不到fonts目录。</p>
<h2 id="2-配置">2、配置</h2>
<pre><code>node  14.7.0
npm   6.14.7
</code></pre>
<pre><code>dependencies
&quot;@electron/remote&quot;: &quot;^2.0.10&quot;,
&quot;core-js&quot;: &quot;^3.8.3&quot;,
&quot;element-ui&quot;: &quot;^2.15.13&quot;,
&quot;vue&quot;: &quot;^2.6.14&quot;,
&quot;vue-router&quot;: &quot;^3.5.1&quot;,
&quot;vuex&quot;: &quot;^3.6.2&quot;
</code></pre>
<pre><code>devDependencies
&quot;@babel/plugin-transform-private-methods&quot;: &quot;^7.22.5&quot;,
&quot;@vue/cli-plugin-babel&quot;: &quot;~5.0.0&quot;,
&quot;@vue/cli-plugin-router&quot;: &quot;~5.0.0&quot;,
&quot;@vue/cli-plugin-vuex&quot;: &quot;~5.0.0&quot;,
 &quot;@vue/cli-service&quot;: &quot;~5.0.0&quot;,
&quot;electron&quot;: &quot;^13.0.0&quot;,
&quot;electron-devtools-installer&quot;: &quot;^3.1.0&quot;,
&quot;sass&quot;: &quot;^1.32.7&quot;,
&quot;sass-loader&quot;: &quot;^12.0.0&quot;,
&quot;vue-cli-plugin-electron-builder&quot;: &quot;~2.1.1&quot;,
&quot;vue-template-compiler&quot;: &quot;^2.6.14&quot;
</code></pre>
<h2 id="3-现象">3、现象</h2>
<p>本地启动serve正常<br>
打包build使用免安装版本打开字体图标丢失</p>
<h2 id="4-解决方案">4、解决方案</h2>
<p>修改vue配置（vue.config.js）</p>
<pre><code>const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true,
  pluginOptions: {
    electronBuilder: {
      customFileProtocol: './',  // 就是这个配置
    }
  }
})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[快速删除 node_modules]]></title>
        <id>https://chenlimao.github.io/post/fZubm7pYUNITS6e2Kvk8/</id>
        <link href="https://chenlimao.github.io/post/fZubm7pYUNITS6e2Kvk8/">
        </link>
        <updated>2023-05-24T10:02:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">🙈 前言</h2>
<p>node_modules 文件夹中包含了大量 node 需要的依赖包，如果直接删除的话，非常耗时。</p>
<p>rimraf包的作用：以包的形式包装rm -rf命令，用来删除文件和文件夹的，不管文件夹是否为空，都可以删除。</p>
<h2 id="方法">🙉 方法</h2>
<p>1️⃣ 安装 rimraf</p>
<pre><code>npm i rimraf -g
</code></pre>
<p>2️⃣ 进入需要清理的项目中，执行</p>
<pre><code>rimraf node_modules
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[.gitignore 忽略文件]]></title>
        <id>https://chenlimao.github.io/post/xS9zbsBNfPaduZJhg3HO/</id>
        <link href="https://chenlimao.github.io/post/xS9zbsBNfPaduZJhg3HO/">
        </link>
        <updated>2022-09-22T12:03:49.000Z</updated>
        <summary type="html"><![CDATA[<p>㊙️.gitignore 文件中忽略项不起作用的解决方法</p>
]]></summary>
        <content type="html"><![CDATA[<p>㊙️.gitignore 文件中忽略项不起作用的解决方法</p>
<!-- more -->
<h2 id="需求">需求</h2>
<ul>
<li><strong>希望忽略提交某个文件</strong></li>
<li><strong>但是不删除本地文件跟远程仓库文件</strong></li>
</ul>
<h2 id="git库所在的文件夹中的文件大致有4种状态">git库所在的文件夹中的文件大致有4种状态</h2>
<ul>
<li>Untracked：<br>
<strong>未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged</strong></li>
<li>Staged：<br>
<strong>暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态.执行git reset HEAD filename取消暂存, 文件状态为Modified</strong></li>
<li>Unmodify：<br>
<strong>文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改,而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</strong></li>
<li>Modified：<br>
<strong>文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态,使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改</strong></li>
</ul>
<h2 id="git-状态-untracked-和-not-staged的区别">Git 状态 untracked 和 not staged的区别</h2>
<ul>
<li>untrack     表示是新文件，没有被add过，是为跟踪的意思。</li>
<li>not staged  表示add过的文件，即跟踪文件，再次修改没有add，就是没有暂存的意思</li>
</ul>
<h2 id="需要特别注意的是">需要特别注意的是：</h2>
<ul>
<li>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</li>
<li>想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件，对于已经被staged文件，加入.gitignore文件时一定要先从staged移除，才可以忽略。</li>
</ul>
<h2 id="git忽略文件的常用方法">git忽略文件的常用方法</h2>
<ul>
<li>1、git通常在.gitignore文件进行配置，来忽略本地文件。但是这仅对于重来没有提交过的文件有效。<a href="#one"><font color="#00dd00">解决方法一</font></a></li>
<li>2、使用git update-index --skip-worktree path设置标识，使git忽略对应的文件。<a href="#two"><font color="#00dd00">解决方法二</font></a></li>
<li>3、使用git update-index --assume-unchanged path设置标识，使git忽略对应的文件。</li>
</ul>
<h2 id="skip-worktree和assume-nochanged的差别">skip-worktree和assume-nochanged的差别</h2>
<ul>
<li>使用 git update-index --skip-worktree [file] 可以实现修改本地文件不会被提交，但又可以拉取最新更改的需求。适用于一些不经常变动，但是必须本地化设置的文件。</li>
<li>git update-index --assume-unchanged [file] 该命令只是假设文件没有变动，使用reset时，会将文件修改回去。</li>
</ul>
<h2 id="h6-idone解决方法一h6"><h6 id='one'>解决方法一</h6></h2>
<p><strong>比如我们不想提交根路径（有.git文件的文件夹路径）下的env/version.js 版本js文件</strong></p>
<ul>
<li>1、移除所有状态为Staged的文件或者移除单个状态为Staged的文件</li>
</ul>
<pre><code># 预览要移除的文件
git rm -r -n --cached .
# 移除所有文件
git rm -r --cached .

# 预览要移除的文件
git rm -r -n --cached ./env/version.js
# 移除单个文件
git rm -r --cached ./env/version.js
</code></pre>
<ul>
<li>2、在.gitignore文件进行配置，来忽略本地文件(此步骤可以在步骤一前操作)</li>
</ul>
<pre><code>env/version.js
</code></pre>
<ul>
<li>3、提交最新的文件</li>
</ul>
<pre><code># 提交代码到本地
git add .

# 提交到远程仓库
git commit -m 'update .gitignore'
</code></pre>
<ul>
<li>4、这样会出现一个问题<br>
<strong>当前操作会在远程仓库里面把忽略的文件删除，也就是git会忽略提交当前文件，但是远程仓库也不会存在这个文件，所以只实现第一个需求</strong></li>
</ul>
<h2 id="h6-idtwo解决方法二h6"><h6 id='two'>解决方法二</h6></h2>
<p><strong>使用git update-index --skip-worktree path设置标识，使git忽略对应的文件。</strong><br>
<strong>此方法不会删除远程仓库文件，又能忽略git提交</strong></p>
<pre><code># 忽略文件
git update-index --skip-worktree ./env/version.js

# 撤消
git update-index --no-skip-worktree ./env/version.js
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微信小程序解密并解包获取源码教程]]></title>
        <id>https://chenlimao.github.io/post/dPa!EpCOmN3lgLse4c9X/</id>
        <link href="https://chenlimao.github.io/post/dPa!EpCOmN3lgLse4c9X/">
        </link>
        <updated>2022-09-13T13:06:17.000Z</updated>
        <summary type="html"><![CDATA[<p>微信小程序解密并解包获取源码教程</p>
]]></summary>
        <content type="html"><![CDATA[<p>微信小程序解密并解包获取源码教程</p>
<!-- more -->
<h2 id="在电脑端提取微信小程序包">在电脑端提取微信小程序包</h2>
<p><img src="https://chenlimao.github.io/post-images/1663074886492.png" alt="" loading="lazy"><br>
<strong>由于我修改过微信app缓存文件路径，所以请勿对照以上图片路径，请使用下面的路径</strong><br>
<code>C:Users/电脑用户名/Documents/WeChat Files/Applet/{{小程序AppID}}/{{随机产生的数字}}/\__APP__.wxapkg 找到小程序源码</code></p>
<p><strong>当前文件夹的小程序文件是安装你打开小程序的时间排序的，一般拿第一个就行了</strong><br>
<img src="https://chenlimao.github.io/post-images/1663075059038.png" alt="" loading="lazy"></p>
<p><strong>如果真不知道是哪个文件夹，可以在手机上查看小程序的AppID，然后找到对应的文件夹</strong><br>
<img src="https://chenlimao.github.io/post-images/1663075297679.png" alt="1" loading="lazy"><br>
<img src="https://chenlimao.github.io/post-images/1663075300508.png" alt="2" loading="lazy"><br>
<img src="https://chenlimao.github.io/post-images/1663075303753.png" alt="3" loading="lazy"></p>
<h2 id="下载解密解包工具">下载解密+解包工具</h2>
<pre><code>git clone https://github.com/superBiuBiuMan/wechatMiniAppReverse
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://chenlimao.github.io/post-images/1663076755463.png" alt="" loading="lazy"></figure>
<h2 id="解密wxapkg包">解密wxapkg包</h2>
<p><strong>电脑端拿到的wxapkg是加密的，所以要先解密</strong><br>
<strong>wechatMiniAppReverse\1.first ==》这个为解密软件，里面有教程，不细讲</strong><br>
<img src="https://chenlimao.github.io/post-images/1663076928410.png" alt="" loading="lazy"></p>
<p><strong>解密完成会输出一个.wxapkg文件，等下这个文件要拿来解包</strong></p>
<h2 id="解包">解包</h2>
<p><strong>解密完成的文件不能在微信开发者工具里面调试，所以要解包，生成小程序开发常见的文件</strong><br>
<strong>wechatMiniAppReverse\2.second\nodejs ==》这个为解包软件，里面有教程，不细讲</strong><br>
<img src="https://chenlimao.github.io/post-images/1663077118741.png" alt="" loading="lazy"></p>
<p><strong>注意两点</strong></p>
<ul>
<li>删除掉以下图片里面的文件，这个会导致依赖安装失败<br>
<img src="https://chenlimao.github.io/post-images/1663077318974.png" alt="" loading="lazy"></li>
<li>\nodejs文件夹里面要安装依赖<strong>npm install</strong>，因为解包程序使用到很多npm 模块</li>
</ul>
<h2 id="最后">最后</h2>
<p><strong>最后解包完成的文件夹就是小程序源码，直接在微信开发者工具里面打开就行了</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chrome导入密码]]></title>
        <id>https://chenlimao.github.io/post/WpOwRS9Qvg$BXlxaY6E4/</id>
        <link href="https://chenlimao.github.io/post/WpOwRS9Qvg$BXlxaY6E4/">
        </link>
        <updated>2022-09-09T13:40:45.000Z</updated>
        <summary type="html"><![CDATA[<p>谷歌浏览器导入密码的两种方法</p>
]]></summary>
        <content type="html"><![CDATA[<p>谷歌浏览器导入密码的两种方法</p>
<!-- more -->
<h2 id="方法一">方法一</h2>
<p><strong>打开Google在新标签页输入chrome://flags/#password-import-export并进行回车，状态改为启用状态Enabled</strong><br>
<img src="https://chenlimao.github.io/post-images/1662730980106.png" alt="" loading="lazy"></p>
<h2 id="方法二">方法二</h2>
<p><strong>右键→属性→目标（T）</strong><br>
<img src="https://chenlimao.github.io/post-images/1662731189829.png" alt="" loading="lazy"></p>
<p>在目标内容后输入以下内容，<strong>前面有个空格符号别漏了</strong>→点击确定→继续重新打开Chrome<br>
<code> --enable-features=PasswordImport</code><br>
<img src="https://chenlimao.github.io/post-images/1662731063688.png" alt="" loading="lazy"></p>
<h2 id="导入密码">导入密码</h2>
<p><strong>右上角按钮→设置→自动填充→密码（点击进入）→已保存的密码右后方按钮→导入密码→选择要导入的密码文件（xxx.csv）→密码导入成功并展示</strong><br>
<img src="https://chenlimao.github.io/post-images/1662731429082.png" alt="" loading="lazy"><br>
<img src="https://chenlimao.github.io/post-images/1662731431984.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Pages访问太慢？通过Netlify免费加速]]></title>
        <id>https://chenlimao.github.io/post/zKTbW4rUiJEt7SqdcBQP/</id>
        <link href="https://chenlimao.github.io/post/zKTbW4rUiJEt7SqdcBQP/">
        </link>
        <updated>2022-09-09T13:11:02.000Z</updated>
        <summary type="html"><![CDATA[<p>🍺<strong>Github Pages</strong>为<strong>Github</strong>提供的一项静态站点托管服务，它直接从<strong>Github</strong>仓库获取静态文件进行发布，然后提供一个<strong>github.io</strong>的二级域名供用户访问，支持绑定自定义域名，支持开启HTTPS，开启HTTPS会自动申请证书同时在证书过期前自动续签，这一切都是<strong>免费</strong>的，使用极其简单，只需要将你的静态文件提交到<strong>Github</strong>，然后开启Pages服务即可，我的博客就托管于<strong>Github Pages</strong></p>
<p>🍻但是有个问题，国内访问速度很慢，如果你有梯子另当别论，但是你不可能要求访问网站的用户都有，所以要用到以下这个工具 <strong>Netlify</strong></p>
]]></summary>
        <content type="html"><![CDATA[<p>🍺<strong>Github Pages</strong>为<strong>Github</strong>提供的一项静态站点托管服务，它直接从<strong>Github</strong>仓库获取静态文件进行发布，然后提供一个<strong>github.io</strong>的二级域名供用户访问，支持绑定自定义域名，支持开启HTTPS，开启HTTPS会自动申请证书同时在证书过期前自动续签，这一切都是<strong>免费</strong>的，使用极其简单，只需要将你的静态文件提交到<strong>Github</strong>，然后开启Pages服务即可，我的博客就托管于<strong>Github Pages</strong></p>
<p>🍻但是有个问题，国内访问速度很慢，如果你有梯子另当别论，但是你不可能要求访问网站的用户都有，所以要用到以下这个工具 <strong>Netlify</strong></p>
<!-- more -->
<h2 id="注册netlify">注册Netlify</h2>
<p><a href="https://app.netlify.com/signup">注册网址</a><br>
<em>打开Netlify官网，点击右上角的Sign up注册账号，这里推荐关联Github账号</em><br>
<img src="https://chenlimao.github.io/post-images/1662729441835.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea+GitHub Desktop 同步代码]]></title>
        <id>https://chenlimao.github.io/post/D0fagHZVRvUsMrIi!mWj/</id>
        <link href="https://chenlimao.github.io/post/D0fagHZVRvUsMrIi!mWj/">
        </link>
        <updated>2022-09-09T10:18:46.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="缘由">缘由</h2>
<p>Gridea+Github 同步代码老是失败</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="缘由">缘由</h2>
<p>Gridea+Github 同步代码老是失败</p>
<!-- more -->
<h2 id="错误提示">错误提示</h2>
<pre><code>同步遇到了错误，请查阅 FAQ 或 Issues 来寻找解决方案
</code></pre>
<h2 id="错误原因">错误原因</h2>
<pre><code>1、Github是国外网站，DDDD
2、用了梯子也没用，好像Gridea不支持，有懂得大佬可以留言
</code></pre>
<h2 id="解决办法">解决办法</h2>
<pre><code>使用Github 桌面端+梯子手动上传代码
</code></pre>
<h2 id="例子">例子</h2>
<h3 id="下载github-desktop">下载GitHub Desktop</h3>
<p><a href="https://desktop.github.com/">下载地址</a><br>
<em>双击直接安装就行了</em></p>
<h3 id="clone-github-项目到本地">clone github 项目到本地</h3>
<p><em>点击clone 项目命令</em><br>
<img src="https://chenlimao.github.io/post-images/1662722925880.png" alt="" loading="lazy"><br>
<em>按照下图设置</em><br>
<em>报错是因为你的output文件已经有文件了，清空output文件夹就行了</em><br>
<em>点击clone按钮下载远程仓库代码</em><br>
<img src="https://chenlimao.github.io/post-images/1662722953166.png" alt="" loading="lazy"></p>
<h3 id="配置gridea-邮箱">配置Gridea 邮箱</h3>
<p><em>邮箱跟你Github账户的邮箱一致就行了</em><br>
<img src="https://chenlimao.github.io/post-images/1662723211017.png" alt="" loading="lazy"><br>
<em>原因是Gridea每次同步代码都会重置.git文件夹里面的配置（我猜的），导致跟GitHub Desktop客户端配置不一致，导致文件上传不了，缺少邮箱配置</em><br>
<img src="https://chenlimao.github.io/post-images/1662723321906.png" alt="" loading="lazy"></p>
<h3 id="上传代码">上传代码</h3>
<p><strong>注意：点击同步按钮，不要点击预览不要点击预览不要点击预览，预览按钮会清除output文件夹的.git文件</strong><br>
<img src="https://chenlimao.github.io/post-images/1662723729992.png" alt="" loading="lazy"><br>
<em>最后用GitHub Desktop上传代码就行了</em></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Desktop clone到本地报错]]></title>
        <id>https://chenlimao.github.io/post/kJ8R39M7ZGL2t!ow4nu%/</id>
        <link href="https://chenlimao.github.io/post/kJ8R39M7ZGL2t!ow4nu%/">
        </link>
        <updated>2022-09-09T09:06:01.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="报错提示">报错提示</h2>
<pre><code>This folder contains files. Git can only clone to empty folders.
此文件夹包含文件。Git只能克隆到空文件夹。
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h2 id="报错提示">报错提示</h2>
<pre><code>This folder contains files. Git can only clone to empty folders.
此文件夹包含文件。Git只能克隆到空文件夹。
</code></pre>
<!-- more -->
<h2 id="报错原因">报错原因</h2>
<pre><code>选中的文件夹已经有内容了，删掉当前文件夹或者清空文件夹即可
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Desktop push origin报错]]></title>
        <id>https://chenlimao.github.io/post/igzwVu5HQ2lUbB&amp;Tp^Y6/</id>
        <link href="https://chenlimao.github.io/post/igzwVu5HQ2lUbB&amp;Tp^Y6/">
        </link>
        <updated>2022-09-09T08:41:22.000Z</updated>
        <summary type="html"><![CDATA[<p>报错提示</p>
<pre><code>failed to receive handshake ssl/tls connection failed
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<p>报错提示</p>
<pre><code>failed to receive handshake ssl/tls connection failed
</code></pre>
<!-- more -->
<h2 id="解决办法">解决办法</h2>
<p><em>打开git bash，运行下面两句代码</em></p>
<pre><code>$ git config --global http.sslBackend &quot;openssl&quot;
$ git config --global http.sslCAInfo [path to .pem file]
</code></pre>
]]></content>
    </entry>
</feed>